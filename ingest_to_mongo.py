# Importa√ß√µes necess√°rias
import pandas as pd  # Para manipula√ß√£o de dados tabulares
import os  # Para intera√ß√µes com o sistema de arquivos
from pymongo import MongoClient  # Para se conectar ao MongoDB
from pymongo.errors import ConnectionFailure  # Para tratar falhas de conex√£o
from bson.binary import Binary  # Para armazenar arquivos bin√°rios (imagens) no MongoDB
from dotenv import load_dotenv  # Para carregar vari√°veis de ambiente do arquivo .env

# Carrega as vari√°veis do arquivo .env (deve estar na raiz do projeto)
load_dotenv()

def conectar_ao_mongo(db_name="vgsales_db"):
    """
    Estabelece uma conex√£o com o MongoDB.
    Prioriza a URI da vari√°vel de ambiente MONGO_URI (do .env).
    Caso n√£o esteja dispon√≠vel ou falhe, solicita a URI manualmente.
    """

    mongo_uri = os.getenv("MONGO_URI")  # Pega a URI do .env (caso exista)

    # Fun√ß√£o auxiliar para testar a conex√£o com uma URI
    def testar_conexao(uri):
        try:
            client = MongoClient(uri, serverSelectionTimeoutMS=3000)  # Timeout curto
            client.admin.command("ping")  # Testa se o servidor responde
            return client
        except ConnectionFailure as e:
            print(f"‚ùå Falha na conex√£o com MongoDB: {e}")
            return None
        except Exception as e:
            print(f"‚ùå Erro inesperado ao testar conex√£o: {e}")
            return None

    # Se a URI estiver no .env, tenta conectar com ela
    if mongo_uri:
        client = testar_conexao(mongo_uri)
        if client:
            print("üü¢ Conectado ao MongoDB com sucesso via vari√°vel de ambiente!")
            return client[db_name]
        else:
            print("‚ö†Ô∏è URI do .env inv√°lida ou conex√£o falhou.")

    # Caso a URI n√£o esteja no .env ou falhou, solicita manualmente
    print("\nüîå Vari√°vel MONGO_URI n√£o encontrada. Conex√£o com MongoDB n√£o detectada.")

    while True:
        nova_uri = input("Digite sua URI do MongoDB Atlas (ex: mongodb+srv://user:pass@cluster.../): ").strip()
        client = testar_conexao(nova_uri)
        if client:
            print("‚úÖ Conex√£o bem-sucedida com a URI informada!")
            print("‚ÑπÔ∏è Lembre-se de atualizar seu arquivo .env com esta URI para uso futuro.")
            return client[db_name]
        else:
            print("‚ùå Conex√£o falhou. Verifique sua URI e tente novamente.")

def load_and_clean_data(csv_path='dados/vgsales.csv'):
    """
    Carrega os dados do CSV, remove linhas incompletas e converte ano para inteiro.
    """
    try:
        df = pd.read_csv(csv_path)
        df = df.dropna(subset=['Year', 'Global_Sales'])  # Remove registros sem ano ou vendas
        df['Year'] = df['Year'].astype(int)  # Converte ano para inteiro
        print(f"‚úÖ Dados carregados e limpos de '{csv_path}'. {len(df)} registros.")
        return df
    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo CSV n√£o encontrado em '{csv_path}'.")
        return pd.DataFrame()
    except Exception as e:
        print(f"‚ùå Erro ao carregar ou limpar dados: {e}")
        return pd.DataFrame()

def insert_into_mongo(df, db):
    """
    Insere os dados do DataFrame na cole√ß√£o 'games' do banco de dados MongoDB.
    """
    if db is None:
        print("‚ùå Conex√£o com o MongoDB n√£o estabelecida. N√£o √© poss√≠vel inserir dados de jogos.")
        return

    collection = db['games']  # Nome da cole√ß√£o
    try:
        collection.delete_many({})  # Limpa a cole√ß√£o antes de inserir (opcional)
        collection.insert_many(df.to_dict(orient="records"))  # Converte e insere os dados
        print(f"‚úÖ Inseridos {len(df)} registros na cole√ß√£o '{db.name}.games'")
    except Exception as e:
        print(f"‚ùå Erro ao inserir dados de jogos no MongoDB: {e}")

def insert_graphics_into_mongo(folder='.', db=None, collection_name='graphics'):
    """
    Insere arquivos PNG/PDF da pasta especificada no MongoDB como bin√°rios.
    """
    if db is None:
        print("‚ùå Conex√£o com o MongoDB n√£o estabelecida. N√£o √© poss√≠vel inserir gr√°ficos.")
        return

    collection = db[collection_name]
    try:
        collection.delete_many({})  # Limpa a cole√ß√£o

        # Lista arquivos v√°lidos
        graphics = [f for f in os.listdir(folder) if f.endswith(('.png', '.pdf'))]
        if not graphics:
            print(f"üìÇ Nenhuma imagem PNG/PDF encontrada na pasta '{folder}' para inserir.")
            return

        for file_name in graphics:
            path = os.path.join(folder, file_name)
            with open(path, 'rb') as f:
                binary_data = Binary(f.read())  # L√™ o arquivo como bin√°rio

            doc = {
                "filename": file_name,
                "filetype": os.path.splitext(file_name)[1].replace('.', ''),  # Ex: 'pdf', 'png'
                "data": binary_data
            }
            collection.insert_one(doc)
            print(f"üñºÔ∏è Gr√°fico '{file_name}' inserido com sucesso.")
    except Exception as e:
        print(f"‚ùå Erro ao inserir gr√°ficos no MongoDB: {e}")

def retrieve_graphics_from_mongo(db, pasta_destino="graficos_recuperados", collection_name='graphics'):
    """
    Recupera gr√°ficos bin√°rios do MongoDB e salva localmente.
    """
    if db is None:
        print("‚ùå Conex√£o com o MongoDB n√£o estabelecida. N√£o √© poss√≠vel recuperar gr√°ficos.")
        return

    collection = db[collection_name]
    os.makedirs(pasta_destino, exist_ok=True)  # Cria a pasta de destino, se n√£o existir
    graficos = list(collection.find())

    if not graficos:
        print("üìÇ Nenhum gr√°fico encontrado no banco de dados.")
        return

    print(f"\n‚¨áÔ∏è Recuperando {len(graficos)} gr√°ficos do MongoDB para a pasta '{pasta_destino}':")
    try:
        for doc in graficos:
            filename = doc["filename"]
            path = os.path.join(pasta_destino, filename)
            with open(path, "wb") as f:
                f.write(doc["data"])  # Salva o arquivo no disco
            print(f"  - {filename} salvo com sucesso.")
    except Exception as e:
        print(f"‚ùå Erro ao recuperar gr√°ficos do MongoDB: {e}")

# Bloco principal: executado ao rodar diretamente o script
if __name__ == "__main__":
    print("--- Executando script de ingest√£o (ingest_to_mongo.py) ---")

    db = conectar_ao_mongo()  # Conecta ao MongoDB, preferindo URI do .env

    if db is not None:
        df = load_and_clean_data()  # Carrega e limpa os dados do CSV

        if not df.empty:
            insert_into_mongo(df, db)  # Insere os dados na cole√ß√£o 'games'

            # Descomente a linha abaixo se quiser testar a inser√ß√£o de imagens tamb√©m
            # insert_graphics_into_mongo(folder='.', db=db)

        # Testa a recupera√ß√£o de gr√°ficos para pasta local
        print("\n--- Testando recupera√ß√£o de gr√°ficos ---")
        retrieve_graphics_from_mongo(db)
    else:
        print("‚ùå Falha na conex√£o com MongoDB. As opera√ß√µes de ingest√£o e recupera√ß√£o n√£o foram realizadas.")